<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- Identité du projet -->
    <groupId>com.consulea</groupId>
    <artifactId>consulea-PatientCareCoordinator</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>war</packaging>

    <!-- Informations descriptives -->
    <name>Consulea Patient Care Coordinator</name>
    <description>Système de télé-expertise médicale pour la coordination des soins</description>

    <!-- Configuration de la version Java -->
    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <failOnMissingWebXml>false</failOnMissingWebXml>
    </properties>

    <!-- Dépendances du projet -->
    <dependencies>

        <!-- Jakarta EE : Le framework principal pour les applications d'entreprise -->
        <!-- scope="provided" signifie que Tomcat fournira déjà cette bibliothèque -->
        <dependency>
            <groupId>jakarta.platform</groupId>
            <artifactId>jakarta.jakartaee-api</artifactId>
            <version>10.0.0</version>
            <scope>provided</scope>
        </dependency>

        <!-- Hibernate : Pour la persistance des données (ORM) -->
        <!-- C'est l'implémentation de JPA que nous utilisons -->
        <dependency>
            <groupId>org.hibernate.orm</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>6.2.7.Final</version>
        </dependency>

        <!-- PostgreSQL Driver : Le pilote JDBC pour communiquer avec PostgreSQL -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>42.7.3</version>
        </dependency>

        <!-- BCrypt : Pour le hachage sécurisé des mots de passe -->
        <!-- Important : Ne JAMAIS stocker les mots de passe en clair ! -->
        <dependency>
            <groupId>org.mindrot</groupId>
            <artifactId>jbcrypt</artifactId>
            <version>0.4</version>
        </dependency>

        <!-- JSTL : Bibliothèque de balises pour les pages JSP -->
        <!-- Permet d'éviter d'écrire du code Java directement dans les JSP -->
        <dependency>
            <groupId>jakarta.servlet.jsp.jstl</groupId>
            <artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
            <version>3.0.0</version>
        </dependency>

        <!-- Implémentation de JSTL (l'API seule ne suffit pas) -->
        <dependency>
            <groupId>org.glassfish.web</groupId>
            <artifactId>jakarta.servlet.jsp.jstl</artifactId>
            <version>3.0.1</version>
        </dependency>

        <!-- JUnit 5 : Framework de tests unitaires -->
        <!-- scope="test" signifie que cette bibliothèque n'est utilisée que pour les tests -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>5.10.0</version>
            <scope>test</scope>
        </dependency>

        <!-- Mockito : Pour créer des objets simulés (mocks) dans les tests -->
        <!-- Utile pour tester une classe sans dépendre de ses dépendances réelles -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>5.5.0</version>
            <scope>test</scope>
        </dependency>

        <!-- Extension Mockito pour JUnit 5 -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <version>5.5.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>


    <!-- Configuration de la construction (build) -->
    <build>
        <!-- Le nom final du fichier WAR généré -->
        <finalName>consulea</finalName>

        <plugins>
            <!-- Plugin pour compiler le code Java -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <source>17</source>
                    <target>17</target>
                </configuration>
            </plugin>

            <!-- Plugin pour créer le fichier WAR -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.4.0</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>